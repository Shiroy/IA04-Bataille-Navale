@startuml
package Application {
	class Main
	
	class Viewer
}

package Agent {

	package Ship {
		class Ship {
			..Ship state..
			-lifePoint : int
			-position : Position
			-shootTimer : int
			-faction : Faction
			-ammo : int
			-behavior : ShipStrategy
			..Ship feature..	
			-template : ShipTemplate
			..Message system..
			-messageQueue : Queue<Message>						
			__
			+step(state : SimState) : void
			..Actions..			 
			+move(dest : Int2D) : bool
			+shoot(target : Int2D) : bool			
			.. State accessors ..			
			~timeBeforeShoot() : int			
			.. Message system ..			
			+sendAMessage(msg : Message) : void
			-handleAllMessage()
			
		}
	
		class ShipTemplate {
			-constructionCost : int	
			-attackPower : int
			-maxSpeed : int
			-range : int
			-viewRange : int
			-initialLifePoint : int
			-templateName : String
		}
	
		class ShipFactory <<Singleton>> {
			+getShipTemplate(templateName : string) : ShipTemplate
		}
		note left: The harbor use this\n to get the template to create\n a new ship.
		
		interface ShipStrategy {
			+action(ship : Ship) : void
			+init(ship : Ship) : void
			+shootReceived(ship : Ship, shoot : ShootReceived) : void
			+environementDamage(ship : Ship, envDmg : EnvironmentDamage) : void
			+ennemyKilled(ship : Ship, killed : EnnemyKilled) : void 
		}
		
		package ShipMessage {
		
			interface Message {
				+getType() : int
			}
		
			class ShootReceived {
				-shooter : Ship
				-damage : int
			}
		
			class EnvironmentDamage {
				-damage : int
			}
			
			class EnnemyKilled {
				-who : Ship
			}
			
			Message --* Ship
			ShootReceived --|> Message
			EnvironmentDamage --|> Message
			EnnemyKilled --|> Message
		}
	}
	
	package Harbor {
	
		class Harbor {
			-lifePoint : int
			-faction : Faction
			-position : Double2D
			-woodStock : int
		
			-createShip(name : String) : Ship
			-addWoodStock(nmbr : int) : void
		}
	
		enum Faction {
			RED
			BLUE
		}
	
	 
	
		interface HarborStrategy {
			+action(ship : Ship) : void
			+init(ship : Ship) : void
		}
	}
	
	package Environment {	
	
		class Environment {
			
			-behaviourStrategy : EnvironmentStrategy
			+setStrategy(behaviour : EnvironmentStrategy) : void
			+step(state : SimState) : void
	
		}
	
		interface EnvironmentStrategy {
			+action(env: Environment, state : SimState) : void
			+init(env : Environment) : void
		}
	
	}
		Ship *-- ShipStrategy
	ShipTemplate --o Ship
	
	Harbor o-- Ship : attach harbor  
	Harbor *-- HarborStrategy
	
	Environment *-- EnvironmentStrategy
	
	ShipFactory *-- ShipTemplate
	
}

package Engine {
	
	class Map {
	
	}
	
	class Simulation {
		+start() : void
		+step() : void
	}
	
	Map *-- Harbor
	Map *-- Ship
	
	Simulation *-- Map
}


@enduml