@startuml
package Application {
	class Main
	
	class Viewer
}

package Agent {

	package Ship {
		class Ship {
			-lifePoint : int
			-position : Position
			-template : ShipTemplate
			-faction : Faction	
			-ammo : int
		
			+move(dest : Position) : bool
			+shoot(target : Position) : bool
		}
	
		class ShipTemplate {
			-constructionCost : int	
			-attackPower : int
			-maxSpeed : int
			-range : int
			-viewRange : int
			-initialLifePoint : int
			-templateName : String
		}
	
		class ShipFactory <<Singleton>> {
			+getShipTemplate(templateName : string) : ShipTemplate
		}
		note left: The harbor use this\n to get the template to create\n a new ship.
		
		interface ShipStrategy {
			+action() : void
		}
	}
	
	package Harbor {
	
		class Harbor {
			-lifePoint : int
			-faction : Faction
			-position : Position
			-woodStock : int
		
			-createShip(template : ShipTemplate) : Ship
			-addWoodStock(nmbr : int) : void
		}
	
		enum Faction {
			RED
			BLUE
		}
	
	 
	
		interface HarborStrategy {
			+action() : void
		}
	}
	
	package Environment {	
	
		class Environment {
	
		}
	
		interface EnvironmentStrategy {
			+action() : void
		}
	
	}
		Ship *-- ShipStrategy
	ShipTemplate --o Ship
	
	Harbor o-- Ship : attach harbor  
	Harbor *-- HarborStrategy
	
	Environment *-- EnvironmentStrategy
	
	ShipFactory *-- ShipTemplate
	
}

package Engine {
	
	class Map {
	
	}
	
	class Simulation {
		+start() : void
		+step() : void
	}
	
	Map *-- Harbor
	Map *-- Ship
	
	Simulation *-- Map
}


@enduml